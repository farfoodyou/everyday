// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_INCLUDED_msg_2eproto
#define PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_msg_2eproto();
class Body;
class BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class EchoMsg;
class EchoMsgDefaultTypeInternal;
extern EchoMsgDefaultTypeInternal _EchoMsg_default_instance_;
namespace google {
namespace protobuf {
template<> ::Body* Arena::CreateMaybeMessage<::Body>(Arena*);
template<> ::EchoMsg* Arena::CreateMaybeMessage<::EchoMsg>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class EchoMsg final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EchoMsg) */ {
 public:
  EchoMsg();
  virtual ~EchoMsg();

  EchoMsg(const EchoMsg& from);

  inline EchoMsg& operator=(const EchoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoMsg(EchoMsg&& from) noexcept
    : EchoMsg() {
    *this = ::std::move(from);
  }

  inline EchoMsg& operator=(EchoMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EchoMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoMsg* internal_default_instance() {
    return reinterpret_cast<const EchoMsg*>(
               &_EchoMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EchoMsg* other);
  friend void swap(EchoMsg& a, EchoMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoMsg* New() const final {
    return CreateMaybeMessage<EchoMsg>(nullptr);
  }

  EchoMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoMsg& from);
  void MergeFrom(const EchoMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tuple = 2;
  int tuple_size() const;
  void clear_tuple();
  static const int kTupleFieldNumber = 2;
  const ::std::string& tuple(int index) const;
  ::std::string* mutable_tuple(int index);
  void set_tuple(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tuple(int index, ::std::string&& value);
  #endif
  void set_tuple(int index, const char* value);
  void set_tuple(int index, const char* value, size_t size);
  ::std::string* add_tuple();
  void add_tuple(const ::std::string& value);
  #if LANG_CXX11
  void add_tuple(::std::string&& value);
  #endif
  void add_tuple(const char* value);
  void add_tuple(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tuple() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tuple();

  // repeated .Body body = 3;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  ::Body* mutable_body(int index);
  ::google::protobuf::RepeatedPtrField< ::Body >*
      mutable_body();
  const ::Body& body(int index) const;
  ::Body* add_body();
  const ::google::protobuf::RepeatedPtrField< ::Body >&
      body() const;

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:EchoMsg)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> tuple_;
  ::google::protobuf::RepeatedPtrField< ::Body > body_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Body final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Body) */ {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(Body&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Body& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Body* other);
  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Body* New() const final {
    return CreateMaybeMessage<Body>(nullptr);
  }

  Body* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Body>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tuple = 1;
  int tuple_size() const;
  void clear_tuple();
  static const int kTupleFieldNumber = 1;
  const ::std::string& tuple(int index) const;
  ::std::string* mutable_tuple(int index);
  void set_tuple(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tuple(int index, ::std::string&& value);
  #endif
  void set_tuple(int index, const char* value);
  void set_tuple(int index, const char* value, size_t size);
  ::std::string* add_tuple();
  void add_tuple(const ::std::string& value);
  #if LANG_CXX11
  void add_tuple(::std::string&& value);
  #endif
  void add_tuple(const char* value);
  void add_tuple(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tuple() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tuple();

  // @@protoc_insertion_point(class_scope:Body)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> tuple_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoMsg

// string msg = 1;
inline void EchoMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoMsg::msg() const {
  // @@protoc_insertion_point(field_get:EchoMsg.msg)
  return msg_.GetNoArena();
}
inline void EchoMsg::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EchoMsg.msg)
}
#if LANG_CXX11
inline void EchoMsg::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EchoMsg.msg)
}
#endif
inline void EchoMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EchoMsg.msg)
}
inline void EchoMsg::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EchoMsg.msg)
}
inline ::std::string* EchoMsg::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:EchoMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoMsg::release_msg() {
  // @@protoc_insertion_point(field_release:EchoMsg.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoMsg::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:EchoMsg.msg)
}

// repeated string tuple = 2;
inline int EchoMsg::tuple_size() const {
  return tuple_.size();
}
inline void EchoMsg::clear_tuple() {
  tuple_.Clear();
}
inline const ::std::string& EchoMsg::tuple(int index) const {
  // @@protoc_insertion_point(field_get:EchoMsg.tuple)
  return tuple_.Get(index);
}
inline ::std::string* EchoMsg::mutable_tuple(int index) {
  // @@protoc_insertion_point(field_mutable:EchoMsg.tuple)
  return tuple_.Mutable(index);
}
inline void EchoMsg::set_tuple(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:EchoMsg.tuple)
  tuple_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EchoMsg::set_tuple(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:EchoMsg.tuple)
  tuple_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EchoMsg::set_tuple(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tuple_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:EchoMsg.tuple)
}
inline void EchoMsg::set_tuple(int index, const char* value, size_t size) {
  tuple_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EchoMsg.tuple)
}
inline ::std::string* EchoMsg::add_tuple() {
  // @@protoc_insertion_point(field_add_mutable:EchoMsg.tuple)
  return tuple_.Add();
}
inline void EchoMsg::add_tuple(const ::std::string& value) {
  tuple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:EchoMsg.tuple)
}
#if LANG_CXX11
inline void EchoMsg::add_tuple(::std::string&& value) {
  tuple_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:EchoMsg.tuple)
}
#endif
inline void EchoMsg::add_tuple(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tuple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:EchoMsg.tuple)
}
inline void EchoMsg::add_tuple(const char* value, size_t size) {
  tuple_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:EchoMsg.tuple)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
EchoMsg::tuple() const {
  // @@protoc_insertion_point(field_list:EchoMsg.tuple)
  return tuple_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
EchoMsg::mutable_tuple() {
  // @@protoc_insertion_point(field_mutable_list:EchoMsg.tuple)
  return &tuple_;
}

// repeated .Body body = 3;
inline int EchoMsg::body_size() const {
  return body_.size();
}
inline void EchoMsg::clear_body() {
  body_.Clear();
}
inline ::Body* EchoMsg::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:EchoMsg.body)
  return body_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Body >*
EchoMsg::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:EchoMsg.body)
  return &body_;
}
inline const ::Body& EchoMsg::body(int index) const {
  // @@protoc_insertion_point(field_get:EchoMsg.body)
  return body_.Get(index);
}
inline ::Body* EchoMsg::add_body() {
  // @@protoc_insertion_point(field_add:EchoMsg.body)
  return body_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Body >&
EchoMsg::body() const {
  // @@protoc_insertion_point(field_list:EchoMsg.body)
  return body_;
}

// -------------------------------------------------------------------

// Body

// repeated string tuple = 1;
inline int Body::tuple_size() const {
  return tuple_.size();
}
inline void Body::clear_tuple() {
  tuple_.Clear();
}
inline const ::std::string& Body::tuple(int index) const {
  // @@protoc_insertion_point(field_get:Body.tuple)
  return tuple_.Get(index);
}
inline ::std::string* Body::mutable_tuple(int index) {
  // @@protoc_insertion_point(field_mutable:Body.tuple)
  return tuple_.Mutable(index);
}
inline void Body::set_tuple(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Body.tuple)
  tuple_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Body::set_tuple(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Body.tuple)
  tuple_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Body::set_tuple(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tuple_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Body.tuple)
}
inline void Body::set_tuple(int index, const char* value, size_t size) {
  tuple_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Body.tuple)
}
inline ::std::string* Body::add_tuple() {
  // @@protoc_insertion_point(field_add_mutable:Body.tuple)
  return tuple_.Add();
}
inline void Body::add_tuple(const ::std::string& value) {
  tuple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Body.tuple)
}
#if LANG_CXX11
inline void Body::add_tuple(::std::string&& value) {
  tuple_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Body.tuple)
}
#endif
inline void Body::add_tuple(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tuple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Body.tuple)
}
inline void Body::add_tuple(const char* value, size_t size) {
  tuple_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Body.tuple)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Body::tuple() const {
  // @@protoc_insertion_point(field_list:Body.tuple)
  return tuple_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Body::mutable_tuple() {
  // @@protoc_insertion_point(field_mutable_list:Body.tuple)
  return &tuple_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_msg_2eproto
